{"version":3,"sources":["webpack:///./src/components/tags-list.tsx","webpack:///./src/components/blog-post-preview.tsx","webpack:///./src/templates/tags.tsx"],"names":["TagsList","tags","css","map","tag","rhythm","key","to","kebabCase","BlogPostPreview","props","slug","title","date","excerpt","pageQuery","Tags","pageContext","data","location","allMarkdownRemark","edges","totalCount","tagHeader","pathName","window","pathname","undefined","description","keywords","node","id","fields","frontmatter"],"mappings":"8FAAA,2G,8CAMaA,EAAyC,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACvD,OACE,kBAAIC,IAAG,GACJD,EAAKE,KAAI,SAAAC,GAAG,OACX,kBACEF,IAAKA,YAAF,2BAEeG,YAAO,EAAI,GAF1B,KAIHC,IAAKF,GAEL,YAAC,IAAD,CAAMG,GAAE,SAAWC,IAAUJ,GAArB,KAAR,IAAwCA,U,oCCjBlD,kG,wJAcaK,EAAmD,SAAAC,GAC9D,OACE,mBACER,IAAG,GAIH,YAAC,IAAD,CACEK,GAAIG,EAAMC,KACVT,IAAG,GAKH,kBACEA,IAAKA,YAAF,iBACgBG,YAAO,IADvB,6BAOFK,EAAME,MAAO,IACd,oBACEV,IAAG,GADL,KAKKQ,EAAMG,OAGb,iBACEX,IAAKA,YAAF,iBACgBG,YAAO,EAAI,GAD3B,MAIFK,EAAMI,UAGX,YAAC,IAAD,CAAUb,KAAMS,EAAMT,U,kCCrD5B,yIAsEac,EAAY,aA0BVC,UA7E4D,SAAC,GAItE,IAHJC,EAGI,EAHJA,YACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEQf,EAAQa,EAARb,IADJ,EAE0Bc,EAAKE,kBAA3BC,EAFJ,EAEIA,MAAOC,EAFX,EAEWA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEElB,EAFF,IAGToB,EACJ,oBAAOC,OAAyBN,EAASO,cAAWC,EAEtD,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEf,MAAK,oBAAsBR,EAC3BwB,YAAW,oBAAsBxB,EACjCyB,SAAUzB,EACVsB,SAAUF,IAEZ,sBAAKD,GACL,2BACE,YAAC,IAAD,CAAMhB,GAAG,SAAT,YACA,YAAC,IAAD,CACEL,IAAKA,YAAF,eACcG,YAAO,EAAI,GADzB,KAGHE,GAAG,KAJL,cASF,sBACGc,EAAMlB,KAAI,YAAmB,IAAhB2B,EAAgB,EAAhBA,KACZ,OACE,YAAC,IAAD,CACExB,IAAKwB,EAAKC,GACVpB,KAAMmB,EAAKE,OAAOrB,KAClBC,MAAOkB,EAAKG,YAAYrB,MACxBC,KAAMiB,EAAKG,YAAYpB,KACvBZ,KAAM6B,EAAKG,YAAYhC,KACvBa,QAASgB,EAAKhB","file":"component---src-templates-tags-tsx-fb2f84ea4a63fbbe4d04.js","sourcesContent":["import { css } from '@emotion/core';\nimport { Link } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\nimport React from 'react';\nimport { rhythm } from '../utils/typography';\n\nexport const TagsList: React.FC<{ tags: string[] }> = ({ tags }) => {\n  return (\n    <ul css={css('list-style: none;')}>\n      {tags.map(tag => (\n        <li\n          css={css`\n            float: left;\n            margin: 0 0 0 ${rhythm(1 / 4)};\n          `}\n          key={tag}\n        >\n          <Link to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { css } from '@emotion/core';\nimport { Link } from 'gatsby';\nimport React from 'react';\nimport { rhythm } from '../utils/typography';\nimport { TagsList } from './tags-list';\n\nexport interface IBlogPostPreviewProps {\n  slug: string;\n  title: string;\n  date: Date | string;\n  excerpt: string;\n  tags: string[];\n}\n\nexport const BlogPostPreview: React.FC<IBlogPostPreviewProps> = props => {\n  return (\n    <div\n      css={css`\n        display: inline-block;\n      `}\n    >\n      <Link\n        to={props.slug}\n        css={css`\n          text-decoration: none;\n          color: inherit;\n        `}\n      >\n        <h3\n          css={css`\n            margin-bottom: ${rhythm(1 / 2)};\n            &:hover {\n              color: #1ca086;\n            }\n          `}\n        >\n          {props.title}{' '}\n          <span\n            css={css`\n              color: #bbb;\n            `}\n          >\n            â€” {props.date}\n          </span>\n        </h3>\n        <p\n          css={css`\n            margin-bottom: ${rhythm(1 / 4)};\n          `}\n        >\n          {props.excerpt}\n        </p>\n      </Link>\n      <TagsList tags={props.tags} />\n    </div>\n  );\n};\n","import { graphql, Link, PageProps } from 'gatsby';\nimport React from 'react';\nimport Layout from '../components/layout';\nimport { SEO } from '../components/seo';\nimport { BlogPostPreview } from '../components/blog-post-preview';\nimport { css } from '@emotion/core';\nimport { rhythm } from '../utils/typography';\n\nexport interface TagsPageDataProps {\n  allMarkdownRemark: {\n    edges: any;\n    totalCount: number;\n  };\n}\n\nexport interface TagsPageContextProps {\n  tag: string[];\n}\n\nconst Tags: React.FC<PageProps<TagsPageDataProps, TagsPageContextProps>> = ({\n  pageContext,\n  data,\n  location,\n}) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n  const pathName =\n    typeof window !== `undefined` ? location.pathname : undefined;\n\n  return (\n    <Layout>\n      <SEO\n        title={`Posts with a tag ${tag}`}\n        description={`Posts with a tag ${tag}`}\n        keywords={tag}\n        pathname={pathName}\n      />\n      <h3>{tagHeader}</h3>\n      <section>\n        <Link to=\"/tags\">All tags</Link>\n        <Link\n          css={css`\n            margin-left: ${rhythm(1 / 4)};\n          `}\n          to=\"/\"\n        >\n          All posts\n        </Link>\n      </section>\n      <ul>\n        {edges.map(({ node }: any) => {\n          return (\n            <BlogPostPreview\n              key={node.id}\n              slug={node.fields.slug}\n              title={node.frontmatter.title}\n              date={node.frontmatter.date}\n              tags={node.frontmatter.tags}\n              excerpt={node.excerpt}\n            />\n          );\n        })}\n      </ul>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}